// Generated by CoffeeScript 1.3.3
(function() {
  var Bot, Game, Player, async, binions, fs;

  async = require('async');

  fs = require('fs');

  binions = require('binions');

  Player = binions.Player;

  Game = binions.Game;

  Bot = require('./bot');

  exports.start = function(config) {
    var betting, bots, chips, j, location, maxRounds, name, observer, observers, players, run, _ref, _ref1;
    observers = [];
    players = [];
    bots = [];
    chips = config.chips;
    betting = (_ref = binions.betting)[config.betting.strategy].apply(_ref, config.betting.amounts);
    maxRounds = config.maxRounds || 100;
    for (observer in config.observers) {
      observers.push(require(observer));
    }
    _ref1 = config.bots;
    for (name in _ref1) {
      location = _ref1[name];
      bots.push(Bot.create(location, {
        name: name
      }));
    }
    j = 0;
    run = function() {
      var game;
      game = new Game(players, betting);
      game.run();
      game.on('roundComplete', function() {});
      return game.on('complete', function(status) {
        var numPlayer;
        console.log("Round " + j);
        j++;
        numPlayer = (players.filter(function(p) {
          return p.chips > 0;
        })).length;
        if (j === maxRounds || numPlayer < 2) {
          console.log(players.map(function(p) {
            return "Name: " + p.name + " - $" + p.chips;
          }));
          return process.exit();
        } else {
          console.log(players.map(function(p) {
            return "Name: " + p.name + " - $" + p.chips;
          }));
          players = players.concat(players.shift());
          return run();
        }
      });
    };
    return async.until((function() {
      return bots.filter(function(bot) {
        return !bot.loaded;
      }).length === 0;
    }), (function(cb) {
      return setTimeout(cb, 200);
    }), function() {
      var bot, i, _i, _len;
      for (i = _i = 0, _len = bots.length; _i < _len; i = ++_i) {
        bot = bots[i];
        players.push(new Player(bot, chips, i));
      }
      return run();
    });
  };

}).call(this);
