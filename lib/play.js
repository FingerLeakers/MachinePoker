// Generated by CoffeeScript 1.4.0
(function() {
  var Bot, Game, Player, async, binions, fs,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  async = require('async');

  fs = require('fs');

  binions = require('binions');

  Player = binions.Player;

  Game = binions.Game;

  Bot = require('./bot');

  Array.prototype.shuffle = function() {
    return this.sort(function() {
      return 0.5 - Math.random();
    });
  };

  exports.start = function(config) {
    var allBots, betting, botNames, bots, botsToLoad, chips, j, location, maxRounds, name, narrator, newBot, obsLocation, obsNotifier, observer, observers, players, run, x, _i, _len, _ref, _ref1;
    observers = [];
    players = [];
    bots = [];
    narrator = null;
    chips = config.chips;
    betting = (_ref = binions.betting)[config.betting.strategy].apply(_ref, config.betting.amounts);
    maxRounds = config.maxRounds || 100;
    _ref1 = config.observers || [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      observer = _ref1[_i];
      obsLocation = "" + (process.cwd()) + "/" + observer;
      if (fs.existsSync(obsLocation + ".js")) {
        observers.push(require(obsLocation));
      }
    }
    allBots = config.bots;
    botsToLoad = 0;
    for (x in allBots) {
      botsToLoad++;
    }
    botNames = [];
    for (name in allBots) {
      location = allBots[name];
      newBot = Bot.create(location, {
        name: name,
        debug: config.debug,
        timeout: config.limitations.timeout
      });
      newBot.once('loaded', function() {
        var botNum, curName, player;
        curName = this.name;
        botNum = 2;
        while (__indexOf.call(botNames, curName) >= 0) {
          curName = this.name + " #" + botNum;
          botNum++;
        }
        botNames.push(curName);
        this.name = curName;
        console.log("Loaded bot " + this.name);
        player = new Player(this, chips, this.name);
        players.push(player);
        player.on('betAction', function(action, amount, err) {
          return obsNotifier('betAction', this, action, amount, err);
        });
        botsToLoad--;
        if (botsToLoad === 0) {
          return run();
        }
      });
      bots.push(newBot);
    }
    bots.shuffle();
    obsNotifier = function(type) {
      var args, _j, _len1, _results;
      args = Array.prototype.slice.call(arguments, 1);
      _results = [];
      for (_j = 0, _len1 = observers.length; _j < _len1; _j++) {
        observer = observers[_j];
        if (observer[type]) {
          _results.push(observer[type].apply(this, args));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    j = 1;
    return run = function() {
      var game;
      game = new Game(players, betting, j);
      game.on('roundStart', function() {
        return obsNotifier('roundStart', game.status(Game.STATUS.PRIVILEGED));
      });
      game.on('stateChange', function(state) {
        return obsNotifier('stateChange', game.status(Game.STATUS.PRIVILEGED));
      });
      game.on('roundComplete', function() {
        return obsNotifier('roundComplete', game.status(Game.STATUS.PRIVILEGED));
      });
      game.on('complete', function(status) {
        var numPlayer, player, winner, _j, _len1;
        obsNotifier('complete', game.status(Game.STATUS.PRIVILEGED));
        j++;
        numPlayer = (players.filter(function(p) {
          return p.chips > 0;
        })).length;
        if (j > maxRounds || numPlayer < 2) {
          winner = players[0];
          for (_j = 0, _len1 = players.length; _j < _len1; _j++) {
            player = players[_j];
            if (player.chips > winner.chips) {
              winner = player;
            }
          }
          console.error("winner is " + winner.name + " with $" + winner.chips);
          return process.exit();
        } else {
          players = players.concat(players.shift());
          return run();
        }
      });
      return game.run();
    };
  };

}).call(this);
