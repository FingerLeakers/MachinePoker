// Generated by CoffeeScript 1.4.0
(function() {
  var Bot, EventEmitter, Pitboss, fs, request, retrieveBot, util, vm,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  request = require('request');

  util = require('util');

  vm = require('vm');

  EventEmitter = require('events').EventEmitter;

  Pitboss = require('pitboss').Pitboss;

  Bot = (function(_super) {

    __extends(Bot, _super);

    function Bot(opts) {
      var _base;
      this.opts = opts;
      this.setupFinished = __bind(this.setupFinished, this);

      this.opts || (this.opts = {});
      this.name = this.opts['name'] || "Unnamed";
      (_base = this.opts)['brainSize'] || (_base['brainSize'] = 4096);
      this.brain = {};
      this.loaded = false;
    }

    Bot.prototype.getOptions = function(code, callback) {
      var myCode, nameFetcher,
        _this = this;
      myCode = "var module = {};\nvar exports = module.exports = {};\n" + code + ";\nvar result = {};\n\nvar checkAndAssign = function (func) {\n  if (func !== undefined && typeof func == 'function') {\n     return func();\n   } else if (func != undefined && typeof func == 'string') { return func }\n  return null;\n}\n\nresult.name = checkAndAssign(exports.name);\nresult.debug = checkAndAssign(exports.debug);\n\nresult";
      nameFetcher = new Pitboss(myCode);
      return nameFetcher.run({}, function(err, result) {
        if (((result != null ? result.name : void 0) != null)) {
          _this.name = result.name || _this.name;
        }
        if (((result != null ? result.debug : void 0) != null)) {
          _this.debug = result.debug || _this.debug;
        }
        return callback(err);
      });
    };

    Bot.prototype.setupFinished = function(err) {
      this.loaded = true;
      return this.emit('loaded');
    };

    Bot.prototype.setup = function(code) {
      this.getOptions(code, this.setupFinished);
      code = "// Debug setup\nvar debug = [];\nvar console = {};\nconsole.log = function(txt){debug.push(txt)};\n\n// CommonJS compat\nvar module = {};\nvar exports = module.exports = {};\n" + code + ";\nvar result = {}\nvar bet = exports.play(game);\nresult = {\n  bet: bet,\n  brain: game.self.brain,\n  debug: debug\n}\nresult // Return results to Pitboss";
      return this.player = new Pitboss(code, this.opts);
    };

    Bot.prototype.update = function(game, callback) {
      var startTime,
        _this = this;
      if (this.opts.debug) {
        startTime = Date.now();
      }
      game.self.brain = this.brain;
      return this.player.run({
        game: game
      }, function(err, result) {
        var debug, _i, _len, _ref;
        if (_this.opts.debug) {
          console.log("Execution of \"" + _this.name + "\" took " + (Date.now() - startTime) + " ms.");
        }
        if (err) {
          return callback(err);
        } else {
          if (_this.opts['debug']) {
            _ref = result['debug'];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              debug = _ref[_i];
              console.log(debug);
            }
          }
          _this.saveBrain(result['brain']);
          return typeof callback === "function" ? callback(null, result['bet']) : void 0;
        }
      });
    };

    Bot.prototype.saveBrain = function(brainObj) {
      var length;
      length = JSON.stringify(brainObj || {});
      if (length > this.opts['brainSize']) {
        return this.brain = {};
      } else {
        return this.brain = brainObj;
      }
    };

    return Bot;

  })(EventEmitter);

  exports.create = function(id, opts) {
    var bot;
    bot = new Bot(opts);
    if (bot.opts.debug) {
      console.log("Creating bot for - " + id);
    }
    retrieveBot(id, function(err, code) {
      return bot.setup(code);
    });
    return bot;
  };

  retrieveBot = function(id, callback) {
    if (id.match(/^http/)) {
      return request(id, function(err, response, body) {
        if (err) {
          return typeof callback === "function" ? callback(err) : void 0;
        } else {
          return typeof callback === "function" ? callback(null, body.toString()) : void 0;
        }
      });
    } else {
      return fs.readFile(id, function(err, data) {
        if (err) {
          return typeof callback === "function" ? callback(err) : void 0;
        } else {
          return typeof callback === "function" ? callback(null, data.toString()) : void 0;
        }
      });
    }
  };

}).call(this);
