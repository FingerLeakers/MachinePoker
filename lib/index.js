// Generated by CoffeeScript 1.4.0
(function() {
  var Bot, EventEmitter, Game, MachinePoker, Player, binions,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  binions = require('binions');

  Player = binions.Player;

  Game = binions.Game;

  Bot = require('./bot');

  exports.betting = binions.betting;

  exports.observers = {
    fileLogger: require('./observers/file_logger'),
    logger: require('./observers/logger'),
    narrator: require('./observers/narrator')
  };

  exports.create = function(betting) {
    return new MachinePoker(betting);
  };

  MachinePoker = (function(_super) {

    __extends(MachinePoker, _super);

    function MachinePoker(opts) {
      var _ref;
      this.opts = opts;
      if ((_ref = this.opts) == null) {
        this.opts = {};
      }
      this.chips = this.opts.chips || 1000;
      this.maxRounds = this.opts.maxRounds || 100;
      this.betting = this.opts.betting || binions.betting.noLimit(10, 20);
      this.botsToLoad = 0;
      this.players = [];
      this.observers = [];
    }

    MachinePoker.prototype.addPlayer = function(playerId, botOpts) {
      var _this = this;
      if (botOpts == null) {
        botOpts = {};
      }
      botOpts.name || (botOpts.name = 'Unnamed');
      this.botsToLoad++;
      return process.nextTick(function() {
        var bot;
        bot = Bot.create(playerId, botOpts);
        console.log("Loading " + playerId + "}");
        return bot.once('loaded', function(err) {
          var player;
          if (err) {
            throw "Error loading bot " + playerId + " - " + err;
          }
          player = new Player(bot, _this.chips, bot.name);
          player.on('betAction', function(action, amount, err) {
            return _this.obsNotifier('betAction', player, action, amount, err);
          });
          _this.players.push(player);
          _this.botsToLoad--;
          if (_this.botsToLoad === 0) {
            return _this.emit('ready');
          }
        });
      });
    };

    MachinePoker.prototype.addObserver = function(obs) {
      return this.observers.push(obs);
    };

    MachinePoker.prototype.obsNotifier = function(type) {
      var args, observer, _i, _len, _ref, _results;
      args = Array.prototype.slice.call(arguments, 1);
      _ref = this.observers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        observer = _ref[_i];
        if (observer[type]) {
          _results.push(observer[type].apply(this, args));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    MachinePoker.prototype.start = function() {
      var currentRound, run,
        _this = this;
      currentRound = 1;
      this.players.sort(function() {
        return Math.random() > 0.5;
      });
      run = function() {
        var game;
        game = new Game(_this.players, _this.betting, currentRound);
        game.on('roundStart', function() {
          return _this.obsNotifier('roundStart', game.status(Game.STATUS.PRIVILEGED));
        });
        game.on('stateChange', function(state) {
          return _this.obsNotifier('stateChange', game.status(Game.STATUS.PRIVILEGED));
        });
        game.once('complete', function(status) {
          var numPlayer;
          _this.obsNotifier('complete', game.status(Game.STATUS.PRIVILEGED));
          currentRound++;
          numPlayer = (_this.players.filter(function(p) {
            return p.chips > 0;
          })).length;
          if (currentRound > _this.maxRounds || numPlayer < 2) {
            return process.exit();
          } else {
            _this.players = _this.players.concat(_this.players.shift());
            return run();
          }
        });
        return game.run();
      };
      return run();
    };

    return MachinePoker;

  })(EventEmitter);

}).call(this);
